generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  password        String
  name            String
  role            Role           @default(PASSENGER)
  phone           String?
  rides           Ride[]         @relation("DriverRides")
  bookings        Booking[]
  notifications   Notification[]
  ratingsGiven    Rating[]       @relation("RatingFromUser")
  ratingsReceived Rating[]       @relation("RatingToUser")
  messages        Message[]      @relation("UserMessages")
  conversations   Conversation[] @relation("ConversationParticipants")
  createdAt       DateTime       @default(now())
  messageReads    MessageRead[]  @relation("UserReads")
}

model Ride {
  id        Int       @id @default(autoincrement())
  from      String
  to        String
  date      DateTime
  time      String
  price     Float
  seats     Int
  driverId  Int
  driver    User      @relation("DriverRides", fields: [driverId], references: [id])
  bookings  Booking[]
  ratings   Rating[] // ✅ Add this line
  createdAt DateTime  @default(now())
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  rideId    Int
  user      User     @relation(fields: [userId], references: [id])
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  status    String   @default("PENDING") // "PENDING", "ACCEPTED", "REJECTED"
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Rating {
  id         Int      @id @default(autoincrement())
  rideId     Int
  ride       Ride     @relation(fields: [rideId], references: [id])
  fromUserId Int
  fromUser   User     @relation("RatingFromUser", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User     @relation("RatingToUser", fields: [toUserId], references: [id])
  score      Int // 1 to 5
  comment    String?
  createdAt  DateTime @default(now())

  @@unique([rideId, fromUserId, toUserId])
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  createdAt    DateTime  @default(now())
}

model Message {
  id             Int          @id @default(autoincrement())
  text           String
  senderId       Int
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())

  reads MessageRead[]
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int
  reader    User     @relation("UserReads", fields: [readerId], references: [id]) // ✅ ADD RELATION NAME
  readerId  Int
  readAt    DateTime @default(now())

  @@unique([messageId, readerId])
}

enum Role {
  DRIVER
  PASSENGER
}
